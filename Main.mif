-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 288D;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A46;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           009 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00A : 822D;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00B : 820F;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00C : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00D : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00E : 4A55;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00F : 3815;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           010 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           011 : 4A52;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           012 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           013 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           014 : 280D;  -- 	JUMP   WaitForSafety
           015 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           016 : 4A52;  -- 	AND    Mask1
           017 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           018 : 1243;  -- 	STORE  Temp        ; (overkill, but looks nice)
           019 : 6001;  -- 	SHIFT  1
           01A : 5243;  -- 	OR     Temp
           01B : 9807;  -- 	OUT    XLEDS
           01C : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01D : 4A53;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01E : 3815;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01F : 0A46;  -- 	LOAD   Zero
           020 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           021 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           022 : B800;  -- 	LOADI  0
           023 : 10F0;  -- 	STORE  DVel        ; desired forward velocity
           024 : 90C2;  -- 	IN     THETA
           025 : 10EF;  -- 	STORE  DTheta      ; desired heading
           026 : B80A;  -- 	LOADI  10          ; 10ms * 10 = 0.1s rate, or 10Hz.
           027 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           028 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           029 : 90D1;  -- 	IN 		IR_LO	
           02A : 2274;  -- 	SUB		REM_0
           02B : 4031;  -- 	JZERO 	Manual
           02C : 90D1;  -- 	IN 		IR_LO	
           02D : 226B;  -- 	SUB		REM_1
           02E : 4030;  -- 	JZERO 	SubroutineTest
           02F : 2829;  -- 	JUMP 	START
           030 : 80BB;  -- 	CALL	ParallelPark
           031 : 90C2;  -- 	IN 		THETA		;Stop movement
           032 : 10EF;  -- 	STORE	DTheta
           033 : 0A46;  -- 	LOAD	Zero
           034 : 10F0;  -- 	STORE 	DVel
           035 : 90D1;  -- 	IN		IR_LO		;Go to Forward if play button is pressed
           036 : 2277;  -- 	SUB		REM_PLAY
           037 : 4048;  -- 	JZERO 	Forward
           038 : 90D1;  -- 	IN		IR_LO		;Go to Reverse if pause button is pressed
           039 : 2279;  -- 	SUB		REM_PAUSE
           03A : 4051;  -- 	JZERO	Reverse
           03B : 90D1;  -- 	IN		IR_LO		;Go to TurnLeft if rewind button is pressed
           03C : 2276;  -- 	SUB		REM_REW
           03D : 406B;  -- 	JZERO	TurnLeft
           03E : 90D1;  -- 	IN		IR_LO		;Go to TurnRight if fast forward button is pressed
           03F : 2278;  -- 	SUB		REM_FF
           040 : 405A;  -- 	JZERO	TurnRight
           041 : 90D1;  -- 	IN		IR_LO		;Parallel Park
           042 : 227C;  -- 	SUB		REM_MUTE
           043 : 407C;  -- 	JZERO	P1
           044 : 90D1;  -- 	IN		IR_LO		;Perp Park
           045 : 227B;  -- 	SUB		REM_PREV
           046 : 407F;  -- 	JZERO	P2
           047 : 2831;  -- 	JUMP 	Manual		;If none of these are pressed, keep checking
           048 : 80D6;  -- 	CALL 	IRDisp
           049 : 90C2;  -- 	IN 		THETA		;keep angle the same
           04A : 10EF;  -- 	STORE	DTheta
           04B : B8C8;  -- 	LOADI	200			;move forward
           04C : 10F0;  -- 	STORE 	DVel
           04D : 90D1;  -- 	In 		IR_LO		;check if robot should stop
           04E : 227A;  -- 	SUB		REM_STOP	
           04F : 4031;  -- 	JZERO	Manual		;go back to manual if so
           050 : 2848;  -- 	JUMP 	Forward		;otherwise, keep moving forward
           051 : 80D6;  -- 	CALL 	IRDisp
           052 : 90C2;  -- 	IN 		THETA		;keep angle the same
           053 : 10EF;  -- 	STORE	DTheta
           054 : BF38;  -- 	LOADI	-200			;move backward
           055 : 10F0;  -- 	STORE 	DVel
           056 : 90D1;  -- 	IN 		IR_LO		;check if robot should stop
           057 : 227A;  -- 	SUB		REM_STOP	
           058 : 4031;  -- 	JZERO	Manual		;go back to manual if so
           059 : 2851;  -- 	JUMP 	Reverse		;otherwise, keep moving backward
           05A : 0A46;  -- 	LOAD	Zero		;stop forward/backward movement
           05B : 10F0;  -- 	STORE 	DVel	
           05C : 90C2;  -- 	IN 		THETA
           05D : 10EF;  -- 	STORE	DTheta
           05E : 80D6;  -- 	CALL 	IRDisp
           05F : 80DB;  -- 	CALL 	GetThetaErr
           060 : 810F;  -- 	CALL 	Abs
           061 : 6FF9;  -- 	ADDI	-7
           062 : 90D1;  -- 	IN 		IR_LO		;check if robot should stop
           063 : 227A;  -- 	SUB		REM_STOP	
           064 : 4031;  -- 	JZERO	Manual		;go back to manual if so
           065 : 385E;  -- 	JPOS	TurnRightLoop
           066 : 90C2;  -- 	IN		THETA
           067 : 6FEC;  -- 	ADDI	-20			;subtract 20 from THETA
           068 : 80D0;  -- 	CALL 	AngleCap	;put angle in range
           069 : 10EF;  -- 	STORE 	DTheta		;store corrected value
           06A : 285E;  -- 	JUMP 	TurnRightLoop	;otherwise, keep turning
           06B : 0A46;  -- 	LOAD	Zero		;stop forward/backward movement
           06C : 10F0;  -- 	STORE 	DVel		
           06D : 90C2;  -- 	IN		THETA
           06E : 10EF;  -- 	STORE	DTheta
           06F : 80D6;  -- 	CALL 	IRDisp
           070 : 80DB;  -- 	CALL 	GetThetaErr
           071 : 810F;  -- 	CALL 	Abs
           072 : 6FF9;  -- 	ADDI	-7
           073 : 90D1;  -- 	IN 		IR_LO		;check if robot should stop
           074 : 227A;  -- 	SUB		REM_STOP	
           075 : 4031;  -- 	JZERO	Manual		;go back to manual if so
           076 : 386F;  -- 	JPOS	TurnLeftLoop 	;otherwise, keep turning
           077 : 90C2;  -- 	IN		THETA
           078 : 6814;  -- 	ADDI	20			;add 20 to THETA
           079 : 80D0;  -- 	CALL	AngleCap	;put angle in range
           07A : 10EF;  -- 	STORE 	DTheta		;store corrected value
           07B : 286F;  -- 	JUMP 	TurnLeftLoop	;otherwise, keep turning
           07C : 80BB;  -- 	CALL	ParallelPark
           07D : 98D0;  -- 	OUT		IR_HI		;clear command
           07E : 2831;  -- 	JUMP	Manual
           07F : 80C7;  -- 	CALL	PerpPark
           080 : 98D0;  -- 	OUT		IR_HI		;clear command
           081 : 2831;  -- 	JUMP 	Manual
           082 : 80D6;  -- 	CALL   IRDisp      ; Display the current IR code
           083 : 2882;  -- 	JUMP   ForeverDisp
           084 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           085 : 0A46;  -- 	LOAD   Zero        ; Stop everything.
           086 : 9883;  -- 	OUT    LVELCMD
           087 : 988B;  -- 	OUT    RVELCMD
           088 : 98B2;  -- 	OUT    SONAREN
           089 : 088C;  -- 	LOAD   DEAD        ; An indication that we are dead
           08A : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the LEDs
           08B : 288B;  -- 	JUMP   Forever     ; Do this forever.
           08C : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           08D : 80D6;  -- 	CALL	IRDisp
           08E : 80F1;  -- 	CALL   ControlMovement
           08F : B000;  -- 	RETI   ; return from ISR
           090 : 0000;  -- XX:		DW	0		;# of cm to move
           091 : 0000;  -- VV:		DW	0		;Speed (and direction)
           092 : 0000;  -- PrevX:	DW	0
           093 : 0000;  -- PrevY:	DW	0
           094 : 0891;  -- 	LOAD	VV
           095 : 10F0;  -- 	STORE 	DVel
           096 : 90C0;  -- 	IN 		XPOS
           097 : 1092;  -- 	STORE	PrevX
           098 : 90C1;  -- 	IN 		YPOS
           099 : 1093;  -- 	STORE 	PrevY
           09A : 90C0;  -- 	IN		XPOS
           09B : 2092;  -- 	SUB		PrevX
           09C : 810F;  -- 	CALL	Abs
           09D : 1204;  -- 	STORE	L2X
           09E : 90C1;  -- 	IN		YPOS
           09F : 2093;  -- 	SUB		PrevY
           0A0 : 810F;  -- 	CALL	Abs
           0A1 : 1205;  -- 	STORE	L2Y
           0A2 : 81DA;  -- 	CALL	L2Estimate
           0A3 : 810F;  -- 	CALL	Abs
           0A4 : 2090;  -- 	SUB		XX		;check if it has gone far enough
           0A5 : 309A;  -- 	JNEG	MoveXXTest
           0A6 : 0A46;  -- 	Load 	Zero
           0A7 : 10F0;  -- 	STORE	DVel
           0A8 : 8800;  -- 	RETURN 
           0A9 : 0000;  -- DD:	DW		0			;value representing # of DEG to turn
           0AA : 90C2;  -- 	IN		THETA		;read in current angle
           0AB : 18A9;  -- 	ADD		DD			;add value
           0AC : 80D0;  -- 	CALL 	AngleCap	;restrict angle to range 0 to 359
           0AD : 10EF;  -- 	STORE	DTheta		;make robot turn to that angle
           0AE : 80DB;  -- 	CALL	GetThetaErr
           0AF : 810F;  -- 	CALL	Abs
           0B0 : 6FFB;  -- 	ADDI	-5
           0B1 : 38AE;  -- 	JPOS	RotateByDDTest
           0B2 : 8800;  -- 	RETURN
           0B3 : 08A9;  -- 	LOAD	DD
           0B4 : 80D0;  -- 	CALL 	AngleCap
           0B5 : 10EF;  -- 	STORE	DTheta		;make robot go to input angle
           0B6 : 80DB;  -- 	CALL	GetThetaErr
           0B7 : 810F;  -- 	CALL	Abs
           0B8 : 6FFB;  -- 	ADDI	-5
           0B9 : 38B6;  -- 	JPOS	GoToAngleTest
           0BA : 8800;  -- 	RETURN
           0BB : BFA6;  -- 	LOADI	-90
           0BC : 10A9;  -- 	STORE	DD
           0BD : 80AA;  -- 	CALL	RotateByDD
           0BE : B8FA;  -- 	LOADI	250
           0BF : 1090;  -- 	STORE	XX
           0C0 : B896;  -- 	LOADI	150
           0C1 : 1091;  -- 	STORE 	VV
           0C2 : 8094;  -- 	CALL	MoveXX
           0C3 : B85A;  -- 	LOADI	90
           0C4 : 10A9;  -- 	STORE	DD
           0C5 : 80AA;  -- 	CALL	RotateByDD
           0C6 : 8800;  -- 	RETURN
           0C7 : BFA6;  -- 	LOADI	-90
           0C8 : 10A9;  -- 	STORE	DD
           0C9 : 80AA;  -- 	CALL	RotateByDD
           0CA : B990;  -- 	LOADI	400
           0CB : 1090;  -- 	STORE	XX
           0CC : B896;  -- 	LOADI	150
           0CD : 1091;  -- 	STORE 	VV
           0CE : 8094;  -- 	CALL	MoveXX
           0CF : 8800;  -- 	RETURN
           0D0 : 6E98;  -- 	ADDI	-360
           0D1 : 30D3;  -- 	JNEG	AngleIsNeg
           0D2 : 28D0;  -- 	JUMP 	AngleCap
           0D3 : 6968;  -- 	ADDI	360
           0D4 : 30D3;  -- 	JNEG	AngleIsNeg
           0D5 : 8800;  -- 	RETURN
           0D6 : 90D0;  -- 	IN     IR_HI       ; get the high word
           0D7 : 9804;  -- 	OUT    SSEG1
           0D8 : 90D1;  -- 	IN     IR_LO       ; get the low word
           0D9 : 9805;  -- 	OUT    SSEG2
           0DA : 8800;  -- 	RETURN
           0DB : 90C2;  -- 	IN     THETA
           0DC : 20EF;  -- 	SUB    DTheta      ; actual - desired angle
           0DD : 8110;  -- 	CALL   Neg         ; desired - actual angle
           0DE : 68B4;  -- 	ADDI   180
           0DF : 8109;  -- 	CALL   Mod360
           0E0 : 6F4C;  -- 	ADDI   -180
           0E1 : 8800;  -- 	RETURN
           0E2 : 20EE;  -- 	SUB     MaxVal
           0E3 : 38E9;  -- 	JPOS    CapVelHigh
           0E4 : 18EE;  -- 	ADD     MaxVal
           0E5 : 18EE;  -- 	ADD     MaxVal
           0E6 : 30EB;  -- 	JNEG    CapVelLow
           0E7 : 20EE;  -- 	SUB     MaxVal
           0E8 : 8800;  -- 	RETURN
           0E9 : 08EE;  -- 	LOAD    MaxVal
           0EA : 8800;  -- 	RETURN
           0EB : 08EE;  -- 	LOAD    MaxVal
           0EC : 8110;  -- 	CALL    Neg
           0ED : 8800;  -- 	RETURN
           0EE : 01FE;  -- 	MaxVal: DW 510
           0EF : 0000;  -- DTheta:    DW 0
           0F0 : 0000;  -- DVel:      DW 0
           0F1 : B832;  -- 	LOADI  50          ; used later to get a +/- constant
           0F2 : 10EE;  -- 	STORE  MaxVal
           0F3 : 80DB;  -- 	CALL   GetThetaErr ; get the heading error
           0F4 : 6002;  -- 	SHIFT  2
           0F5 : 1108;  -- 	STORE  CMAErr      ; hold temporarily
           0F6 : 6003;  -- 	SHIFT  3           ; multiply by another 4
           0F7 : 80E2;  -- 	CALL   CapValue    ; get a +/- max of 50
           0F8 : 1908;  -- 	ADD    CMAErr
           0F9 : 1108;  -- 	STORE  CMAErr
           0FA : B9FE;  -- 	LOADI  510
           0FB : 10EE;  -- 	STORE  MaxVal
           0FC : 08F0;  -- 	LOAD   DVel
           0FD : 80E2;  -- 	CALL   CapValue    ; ensure velocity is valid
           0FE : 10F0;  -- 	STORE  DVel        ; overwrite any invalid input
           0FF : 1908;  -- 	ADD    CMAErr
           100 : 80E2;  -- 	CALL   CapValue    ; ensure velocity is valid
           101 : 988B;  -- 	OUT    RVELCMD
           102 : 0908;  -- 	LOAD   CMAErr
           103 : 8110;  -- 	CALL   Neg         ; left wheel gets negative differential
           104 : 18F0;  -- 	ADD    DVel
           105 : 80E2;  -- 	CALL   CapValue
           106 : 9883;  -- 	OUT    LVELCMD
           107 : 8800;  -- 	RETURN
           108 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           109 : 310C;  -- 	JNEG   M360N
           10A : 6E98;  -- 	ADDI   -360
           10B : 2909;  -- 	JUMP   Mod360
           10C : 6968;  -- 	ADDI   360
           10D : 310C;  -- 	JNEG   M360N
           10E : 8800;  -- 	RETURN
           10F : 3912;  -- 	JPOS   Abs_r
           110 : 5A45;  -- 	XOR    NegOne       ; Flip all bits
           111 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           112 : 8800;  -- 	RETURN
           113 : 0973;  -- 	LOAD   AtanY
           114 : 810F;  -- 	CALL   Abs          ; abs(y)
           115 : 1175;  -- 	STORE  AtanT
           116 : 0972;  -- 	LOAD   AtanX        ; abs(x)
           117 : 810F;  -- 	CALL   Abs
           118 : 2175;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           119 : 3124;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           11A : 0972;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           11B : 3121;  -- 	JNEG   A2_R3
           11C : 8133;  -- 	CALL   A2_calc      ; Octants 1, 8
           11D : 311F;  -- 	JNEG   A2_R1n
           11E : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           11F : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           120 : 8800;  -- 	RETURN
           121 : 8133;  -- 	CALL   A2_calc      ; Octants 4, 5            
           122 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           123 : 8800;  -- 	RETURN
           124 : 0973;  -- 	LOAD   AtanY        ; Swap input arguments
           125 : 1175;  -- 	STORE  AtanT
           126 : 0972;  -- 	LOAD   AtanX
           127 : 1173;  -- 	STORE  AtanY
           128 : 0975;  -- 	LOAD   AtanT
           129 : 1172;  -- 	STORE  AtanX
           12A : 392F;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           12B : 8133;  -- 	CALL   A2_calc      ; else octants 6, 7
           12C : 8110;  -- 	CALL   Neg          ; Negatge the number
           12D : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           12E : 8800;  -- 	RETURN
           12F : 8133;  -- 	CALL   A2_calc      ; Octants 2, 3
           130 : 8110;  -- 	CALL   Neg          ; negate the angle
           131 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           132 : 8800;  -- 	RETURN
           133 : 0973;  -- 	LOAD   AtanY
           134 : 11D2;  -- 	STORE  d16sN        ; Y in numerator
           135 : 0972;  -- 	LOAD   AtanX
           136 : 11D3;  -- 	STORE  d16sD        ; X in denominator
           137 : 815F;  -- 	CALL   A2_div       ; divide
           138 : 09D8;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           139 : 1174;  -- 	STORE  AtanRatio
           13A : 119B;  -- 	STORE  m16sA
           13B : 119C;  -- 	STORE  m16sB
           13C : 8156;  -- 	CALL   A2_mult      ; X^2
           13D : 119B;  -- 	STORE  m16sA
           13E : 0976;  -- 	LOAD   A2c
           13F : 119C;  -- 	STORE  m16sB
           140 : 8156;  -- 	CALL   A2_mult
           141 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           142 : 11D3;  -- 	STORE  d16sD
           143 : 0974;  -- 	LOAD   AtanRatio
           144 : 11D2;  -- 	STORE  d16sN        ; Ratio in numerator
           145 : 815F;  -- 	CALL   A2_div       ; divide
           146 : 09D8;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           147 : 119B;  -- 	STORE  m16sA        ; <= result in radians
           148 : 0977;  -- 	LOAD   A2cd         ; degree conversion factor
           149 : 119C;  -- 	STORE  m16sB
           14A : 8156;  -- 	CALL   A2_mult      ; convert to degrees
           14B : 1175;  -- 	STORE  AtanT
           14C : 6017;  -- 	SHIFT  -7           ; check 7th bit
           14D : 4A47;  -- 	AND    One
           14E : 4153;  -- 	JZERO  A2_rdwn      ; round down
           14F : 0975;  -- 	LOAD   AtanT
           150 : 6018;  -- 	SHIFT  -8
           151 : 6801;  -- 	ADDI   1            ; round up
           152 : 8800;  -- 	RETURN
           153 : 0975;  -- 	LOAD   AtanT
           154 : 6018;  -- 	SHIFT  -8           ; round down
           155 : 8800;  -- 	RETURN
           156 : 8178;  -- 	CALL   Mult16s
           157 : 09A0;  -- 	LOAD   mres16sH
           158 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           159 : 11A0;  -- 	STORE  mres16sH
           15A : 099F;  -- 	LOAD   mres16sL
           15B : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           15C : 4A59;  -- 	AND    LowByte
           15D : 51A0;  -- 	OR     mres16sH     ; combine high and low words of result
           15E : 8800;  -- 	RETURN
           15F : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           160 : 1175;  -- 	STORE  AtanT
           161 : 0975;  -- 	LOAD   AtanT
           162 : 6FFF;  -- 	ADDI   -1
           163 : 3966;  -- 	JPOS   A2_DN        ; not done; continue shifting
           164 : 81A1;  -- 	CALL   Div16s       ; do the standard division
           165 : 8800;  -- 	RETURN
           166 : 1175;  -- 	STORE  AtanT
           167 : 09D2;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           168 : 6001;  -- 	SHIFT  1
           169 : 59D2;  -- 	XOR    d16sN        ; if the sign changed,
           16A : 316E;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           16B : 59D2;  -- 	XOR    d16sN        ; get back shifted version
           16C : 11D2;  -- 	STORE  d16sN
           16D : 2961;  -- 	JUMP   A2_DL
           16E : 09D3;  -- 	LOAD   d16sD
           16F : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           170 : 11D3;  -- 	STORE  d16sD
           171 : 2961;  -- 	JUMP   A2_DL
           172 : 0000;  -- AtanX:      DW 0
           173 : 0000;  -- AtanY:      DW 0
           174 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           175 : 0000;  -- AtanT:      DW 0        ; temporary value
           176 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           177 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           178 : B800;  -- 	LOADI  0
           179 : 119D;  -- 	STORE  m16sc        ; clear carry
           17A : 11A0;  -- 	STORE  mres16sH     ; clear result
           17B : B810;  -- 	LOADI  16           ; load 16 to counter
           17C : 119E;  -- 	STORE  mcnt16s      
           17D : 099D;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           17E : 4182;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           17F : 09A0;  -- 	LOAD   mres16sH     ; if a carry, 
           180 : 199B;  -- 	ADD    m16sA        ;  add multiplicand to result H
           181 : 11A0;  -- 	STORE  mres16sH
           182 : 099C;  -- 	LOAD   m16sB
           183 : 4A47;  -- 	AND    One          ; check bit 0 of multiplier
           184 : 119D;  -- 	STORE  m16sc        ; save as next carry
           185 : 4189;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           186 : 09A0;  -- 	LOAD   mres16sH     ; if bit 0 set,
           187 : 219B;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           188 : 11A0;  -- 	STORE  mres16sH
           189 : 099C;  -- 	LOAD   m16sB
           18A : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           18B : 499A;  -- 	AND    c7FFF        ; clear msb
           18C : 119C;  -- 	STORE  m16sB
           18D : 09A0;  -- 	LOAD   mres16sH     ; load result H
           18E : 600F;  -- 	SHIFT  15           ; move lsb to msb
           18F : 519C;  -- 	OR     m16sB
           190 : 119C;  -- 	STORE  m16sB        ; result L now includes carry out from H
           191 : 09A0;  -- 	LOAD   mres16sH
           192 : 6011;  -- 	SHIFT  -1
           193 : 11A0;  -- 	STORE  mres16sH     ; shift result H >>1
           194 : 099E;  -- 	LOAD   mcnt16s
           195 : 6FFF;  -- 	ADDI   -1           ; check counter
           196 : 397C;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           197 : 099C;  -- 	LOAD   m16sB
           198 : 119F;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           199 : 8800;  -- 	RETURN              ; Done
           19A : 7FFF;  -- c7FFF: DW &H7FFF
           19B : 0000;  -- m16sA: DW 0 ; multiplicand
           19C : 0000;  -- m16sB: DW 0 ; multipler
           19D : 0000;  -- m16sc: DW 0 ; carry
           19E : 0000;  -- mcnt16s: DW 0 ; counter
           19F : 0000;  -- mres16sL: DW 0 ; result low
           1A0 : 0000;  -- mres16sH: DW 0 ; result high
           1A1 : B800;  -- 	LOADI  0
           1A2 : 11D9;  -- 	STORE  dres16sR     ; clear remainder result
           1A3 : 11D6;  -- 	STORE  d16sC1       ; clear carry
           1A4 : 09D2;  -- 	LOAD   d16sN
           1A5 : 59D3;  -- 	XOR    d16sD
           1A6 : 11D4;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1A7 : B811;  -- 	LOADI  17
           1A8 : 11D5;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1A9 : 09D3;  -- 	LOAD   d16sD
           1AA : 810F;  -- 	CALL   Abs          ; take absolute value of denominator
           1AB : 11D3;  -- 	STORE  d16sD
           1AC : 09D2;  -- 	LOAD   d16sN
           1AD : 810F;  -- 	CALL   Abs          ; take absolute value of numerator
           1AE : 11D2;  -- 	STORE  d16sN
           1AF : 09D2;  -- 	LOAD   d16sN
           1B0 : 601F;  -- 	SHIFT  -15          ; get msb
           1B1 : 4A47;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1B2 : 11D7;  -- 	STORE  d16sC2       ; store as carry
           1B3 : 09D2;  -- 	LOAD   d16sN
           1B4 : 6001;  -- 	SHIFT  1            ; shift <<1
           1B5 : 51D6;  -- 	OR     d16sC1       ; with carry
           1B6 : 11D2;  -- 	STORE  d16sN
           1B7 : 09D5;  -- 	LOAD   d16sT
           1B8 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1B9 : 41C9;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1BA : 11D5;  -- 	STORE  d16sT
           1BB : 09D9;  -- 	LOAD   dres16sR
           1BC : 6001;  -- 	SHIFT  1            ; shift remainder
           1BD : 51D7;  -- 	OR     d16sC2       ; with carry from other shift
           1BE : 21D3;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1BF : 31C4;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1C0 : 11D9;  -- 	STORE  dres16sR
           1C1 : B801;  -- 	LOADI  1
           1C2 : 11D6;  -- 	STORE  d16sC1       ; set carry
           1C3 : 29AF;  -- 	JUMP   Div16s_loop
           1C4 : 19D3;  -- 	ADD    d16sD        ; add denominator back in
           1C5 : 11D9;  -- 	STORE  dres16sR
           1C6 : B800;  -- 	LOADI  0
           1C7 : 11D6;  -- 	STORE  d16sC1       ; clear carry
           1C8 : 29AF;  -- 	JUMP   Div16s_loop
           1C9 : 09D2;  -- 	LOAD   d16sN
           1CA : 11D8;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1CB : 09D4;  -- 	LOAD   d16sS        ; check the sign indicator
           1CC : 31CE;  -- 	JNEG   Div16s_neg
           1CD : 8800;  -- 	RETURN
           1CE : 09D8;  -- 	LOAD   dres16sQ     ; need to negate the result
           1CF : 8110;  -- 	CALL   Neg
           1D0 : 11D8;  -- 	STORE  dres16sQ
           1D1 : 8800;  -- 	RETURN	
           1D2 : 0000;  -- d16sN: DW 0 ; numerator
           1D3 : 0000;  -- d16sD: DW 0 ; denominator
           1D4 : 0000;  -- d16sS: DW 0 ; sign value
           1D5 : 0000;  -- d16sT: DW 0 ; temp counter
           1D6 : 0000;  -- d16sC1: DW 0 ; carry value
           1D7 : 0000;  -- d16sC2: DW 0 ; carry value
           1D8 : 0000;  -- dres16sQ: DW 0 ; quotient result
           1D9 : 0000;  -- dres16sR: DW 0 ; remainder result
           1DA : 0A04;  -- 	LOAD   L2X
           1DB : 810F;  -- 	CALL   Abs
           1DC : 1206;  -- 	STORE  L2T1
           1DD : 0A05;  -- 	LOAD   L2Y
           1DE : 810F;  -- 	CALL   Abs
           1DF : 2206;  -- 	SUB    L2T1
           1E0 : 31FC;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1E1 : 1A06;  -- 	ADD    L2T1
           1E2 : 119B;  -- 	STORE  m16sa
           1E3 : B8F6;  -- 	LOADI  246       ; max * 246
           1E4 : 119C;  -- 	STORE  m16sB
           1E5 : 8178;  -- 	CALL   Mult16s
           1E6 : 09A0;  -- 	LOAD   mres16sH
           1E7 : 6008;  -- 	SHIFT  8
           1E8 : 1207;  -- 	STORE  L2T2
           1E9 : 099F;  -- 	LOAD   mres16sL
           1EA : 6018;  -- 	SHIFT  -8        ; / 256
           1EB : 4A59;  -- 	AND    LowByte
           1EC : 5207;  -- 	OR     L2T2
           1ED : 1208;  -- 	STORE  L2T3
           1EE : 0A06;  -- 	LOAD   L2T1
           1EF : 119B;  -- 	STORE  m16sa
           1F0 : B868;  -- 	LOADI  104       ; min * 104
           1F1 : 119C;  -- 	STORE  m16sB
           1F2 : 8178;  -- 	CALL   Mult16s
           1F3 : 09A0;  -- 	LOAD   mres16sH
           1F4 : 6008;  -- 	SHIFT  8
           1F5 : 1207;  -- 	STORE  L2T2
           1F6 : 099F;  -- 	LOAD   mres16sL
           1F7 : 6018;  -- 	SHIFT  -8        ; / 256
           1F8 : 4A59;  -- 	AND    LowByte
           1F9 : 5207;  -- 	OR     L2T2
           1FA : 1A08;  -- 	ADD    L2T3     ; sum
           1FB : 8800;  -- 	RETURN
           1FC : 1A06;  -- 	ADD    L2T1
           1FD : 1207;  -- 	STORE  L2T2
           1FE : 0A06;  -- 	LOAD   L2T1
           1FF : 1208;  -- 	STORE  L2T3
           200 : 0A07;  -- 	LOAD   L2T2
           201 : 1206;  -- 	STORE  L2T1
           202 : 0A08;  -- 	LOAD   L2T3
           203 : 29E2;  -- 	JUMP   CalcDist
           204 : 0000;  -- L2X:  DW 0
           205 : 0000;  -- L2Y:  DW 0
           206 : 0000;  -- L2T1: DW 0
           207 : 0000;  -- L2T2: DW 0
           208 : 0000;  -- L2T3: DW 0
           209 : 9802;  -- 	OUT    TIMER
           20A : 9002;  -- 	IN     TIMER
           20B : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           20C : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           20D : 320A;  -- 	JNEG   Wloop
           20E : 8800;  -- 	RETURN
           20F : 8227;  -- 	CALL   GetBattLvl
           210 : 420F;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           211 : 2268;  -- 	SUB    MinBatt
           212 : 3215;  -- 	JNEG   DeadBatt
           213 : 1A68;  -- 	ADD    MinBatt     ; get original value back
           214 : 8800;  -- 	RETURN
           215 : B820;  -- 	LOADI  &H20
           216 : 980A;  -- 	OUT    BEEP        ; start beep sound
           217 : 8227;  -- 	CALL   GetBattLvl  ; get the battery level
           218 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           219 : 9805;  -- 	OUT    SSEG2
           21A : 9806;  -- 	OUT    LCD
           21B : 0A46;  -- 	LOAD   Zero
           21C : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           21D : 9801;  -- 	OUT    LEDS        ; all LEDs on
           21E : 9807;  -- 	OUT    XLEDS
           21F : 8209;  -- 	CALL   Wait1       ; 1 second
           220 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           221 : 980A;  -- 	OUT    BEEP        ; stop beeping
           222 : 0A46;  -- 	LOAD   Zero
           223 : 9801;  -- 	OUT    LEDS        ; LEDs off
           224 : 9807;  -- 	OUT    XLEDS
           225 : 8209;  -- 	CALL   Wait1       ; 1 second
           226 : 2A15;  -- 	JUMP   DeadBatt    ; repeat forever
           227 : 0A6A;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           228 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           229 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           22A : 8235;  -- 	CALL   BlockI2C    ; wait for it to finish
           22B : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           22C : 8800;  -- 	RETURN
           22D : 8235;  -- 	CALL   BlockI2C    ; wait for idle
           22E : 0A69;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           22F : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           230 : 0A46;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           231 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           232 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           233 : 8235;  -- 	CALL   BlockI2C    ; wait for it to finish
           234 : 8800;  -- 	RETURN
           235 : 0A46;  -- 	LOAD   Zero
           236 : 1243;  -- 	STORE  Temp        ; Used to check for timeout
           237 : 0A43;  -- 	LOAD   Temp
           238 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           239 : 1243;  -- 	STORE  Temp
           23A : 423E;  -- 	JZERO  I2CError    ; Timeout occurred; error
           23B : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           23C : 3A37;  -- 	JPOS   BI2CL       ; If not 0, try again
           23D : 8800;  -- 	RETURN             ; Else return
           23E : 0A46;  -- 	LOAD   Zero
           23F : 692C;  -- 	ADDI   &H12C       ; "I2C"
           240 : 9804;  -- 	OUT    SSEG1
           241 : 9805;  -- 	OUT    SSEG2       ; display error message
           242 : 2A3E;  -- 	JUMP   I2CError
           243 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           244 : 0000;  -- Temp2:	  DW 0 ;
           245 : FFFF;  -- NegOne:   DW -1
           246 : 0000;  -- Zero:     DW 0
           247 : 0001;  -- One:      DW 1
           248 : 0002;  -- Two:      DW 2
           249 : 0003;  -- Three:    DW 3
           24A : 0004;  -- Four:     DW 4
           24B : 0005;  -- Five:     DW 5
           24C : 0006;  -- Six:      DW 6
           24D : 0007;  -- Seven:    DW 7
           24E : 0008;  -- Eight:    DW 8
           24F : 0009;  -- Nine:     DW 9
           250 : 000A;  -- Ten:      DW 10
           251 : 0001;  -- Mask0:    DW &B00000001
           252 : 0002;  -- Mask1:    DW &B00000010
           253 : 0004;  -- Mask2:    DW &B00000100
           254 : 0008;  -- Mask3:    DW &B00001000
           255 : 0010;  -- Mask4:    DW &B00010000
           256 : 0020;  -- Mask5:    DW &B00100000
           257 : 0040;  -- Mask6:    DW &B01000000
           258 : 0080;  -- Mask7:    DW &B10000000
           259 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 11111111
           25A : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           25B : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           25C : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           25D : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           25E : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           25F : 00B4;  -- Deg180:   DW 180       ; 180
           260 : 010E;  -- Deg270:   DW 270       ; 270
           261 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           262 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           263 : FF9C;  -- RSlow:    DW -100
           264 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           265 : FEA2;  -- RMid:     DW -350
           266 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           267 : FE0C;  -- RFast:    DW -500
           268 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           269 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           26A : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           26B : 20DF;  -- REM_1:		DW	&B0010000011011111
           26C : A05F;  -- REM_2:		DW	&B1010000001011111
           26D : 609F;  -- REM_3:		DW	&B0110000010011111
           26E : E01F;  -- REM_4:		DW	&B1110000000011111
           26F : 30CF;  -- REM_5:		DW	&B0011000011001111
           270 : B04F;  -- REM_6:		DW	&B1011000001001111
           271 : 708F;  -- REM_7:		DW	&B0111000010001111
           272 : F00F;  -- REM_8:		DW	&B1111000000001111
           273 : 38C7;  -- REM_9:		DW	&B0011100011000111
           274 : B847;  -- REM_0:		DW	&B1011100001000111
           275 : 00FF;  -- REM_PWR:	DW	&B0000000011111111
           276 : 48B7;  -- REM_REW:	DW	&B0100100010110111
           277 : 28D7;  -- REM_PLAY:	DW	&B0010100011010111
           278 : C837;  -- REM_FF:		DW	&B1100100000110111
           279 : 8877;  -- REM_PAUSE:	DW	&B1000100001110111
           27A : 08F7;  -- REM_STOP:	DW	&B0000100011110111
           27B : C23D;  -- REM_PREV:	DW	&HC23D
           27C : 906F;  -- REM_MUTE:	DW 	&H906F
  END;
